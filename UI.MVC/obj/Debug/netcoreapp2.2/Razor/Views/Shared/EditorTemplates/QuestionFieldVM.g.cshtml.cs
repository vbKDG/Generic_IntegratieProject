#pragma checksum "C:\Users\Alex\Desktop\Stack\‌IntegratieProject 2019\Generic_Repo\UI.MVC\Views\Shared\EditorTemplates\QuestionFieldVM.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f33b96cae8e76ce75af777a458b428e9b17508da"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared_EditorTemplates_QuestionFieldVM), @"mvc.1.0.view", @"/Views/Shared/EditorTemplates/QuestionFieldVM.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Shared/EditorTemplates/QuestionFieldVM.cshtml", typeof(AspNetCore.Views_Shared_EditorTemplates_QuestionFieldVM))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Alex\Desktop\Stack\‌IntegratieProject 2019\Generic_Repo\UI.MVC\Views\_ViewImports.cshtml"
using UI.MVC;

#line default
#line hidden
#line 2 "C:\Users\Alex\Desktop\Stack\‌IntegratieProject 2019\Generic_Repo\UI.MVC\Views\_ViewImports.cshtml"
using UI.MVC.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f33b96cae8e76ce75af777a458b428e9b17508da", @"/Views/Shared/EditorTemplates/QuestionFieldVM.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fe8ea135b7da2bced915af909ed829e56536b857", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared_EditorTemplates_QuestionFieldVM : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<D.UI.MVC.Models.Fields.QuestionFieldVm>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/QuestionSliders.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", "text", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("hidden", new global::Microsoft.AspNetCore.Html.HtmlString("true"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(47, 12, true);
            WriteLiteral("\r\n\r\n\r\n\r\n\r\n\r\n");
            EndContext();
            BeginContext(134, 5, true);
            WriteLiteral("   \r\n");
            EndContext();
            BeginContext(828, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 78 "C:\Users\Alex\Desktop\Stack\‌IntegratieProject 2019\Generic_Repo\UI.MVC\Views\Shared\EditorTemplates\QuestionFieldVM.cshtml"
 if (ViewBag.index == 1)
{

#line default
#line hidden
            BeginContext(2413, 4, true);
            WriteLiteral("    ");
            EndContext();
            BeginContext(2417, 56, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "f33b96cae8e76ce75af777a458b428e9b17508da5477", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2473, 3, true);
            WriteLiteral(" \r\n");
            EndContext();
            BeginContext(2478, 27, true);
            WriteLiteral("    <div id=\"template\">\r\n\r\n");
            EndContext();
            BeginContext(2738, 10, true);
            WriteLiteral("        \r\n");
            EndContext();
            BeginContext(2788, 18619, true);
            WriteLiteral(@"            
            
                    <a hidden=""true"" class=""prevQuestion"" onclick=""ChangeQuestion(-1)"">&#10094;</a>
                    <a hidden=""true"" class=""nextQuestion"" onclick=""ChangeQuestion(1)"">&#10095;</a>

                                
        <h2 id=""questionTitle"">Question 1</h2>           
        <h5>What do you want to ask?</h5>
        <input type=""text"" id=""question""/>
        <br>
        <h5>What type of a question is this?</h5>
        <fieldset id=""questionFieldset"">
            <input type=""radio"" name=""questionFieldset"" id=""questionType 1"" value=""radiobutton"" checked/>
            <span>Radio buttons</span><br>
            <input type=""radio"" name=""questionFieldset"" id=""questionType 2"" value=""checkbox""/>
            <span>Check boxes</span><br>
        </fieldset>
        <div>
            <button id=""Add_Option"" onclick=""AddOption()"" type=""Button"">Add option</button>
            <button id=""Remove_Option"" onclick=""RemoveOption()"" type=""Button"" disabled=""");
            WriteLiteral(@"true"">Remove option</button>            
        </div>
        <label id=""label 1""> Option: 1</label>
        <div class=""option""> <input id=""option 1"" type=""text""/> </div>
        <label id=""label 2""> Option: 2</label>
        <div class=""option""> <input id=""option 2"" type=""text""/> </div>
        <label id=""label 3"" hidden=""true""> Option: 3</label>
        <div class=""option"" > <input id=""option 3"" type=""text"" hidden=""true""/> </div>
        <label id=""label 4"" hidden=""true""> Option: 4</label>
        <div class=""option"" > <input id=""option 4"" type=""text"" hidden=""true""/> </div>
        <label id=""label 5"" hidden=""true""> Option: 5</label>
        <div class=""option""> <input id=""option 5"" type=""text"" hidden=""true""/> </div>
        <div>
            <button id=""Add_Question"" type=""button"" hidden=""true"" onclick=""AddQuestion()"">Add Question</button>
            <button id=""Remove_Question"" type=""button"" hidden=""true"" onclick=""RemoveQuestion()"">Remove Question</button>

        </div>
        
  ");
            WriteLiteral(@"
    </div>
    <script type=""text/javascript"">
        
         
        var optionIndex = 2;
        var questionCount = 0;
        var questionIndex = 0;
        
        var questionTitle = document.getElementById(""questionTitle"");
        var question = document.getElementById(""question"");
        var questionType_1 = document.getElementById(""questionType 1"");
        var questionType_2 = document.getElementById(""questionType 2"");
        var option1 = document.getElementById(""option 1"");
        var option2 = document.getElementById(""option 2"");
        var option3 = document.getElementById(""option 3"");
        var option4 = document.getElementById(""option 4"");
        var option5 = document.getElementById(""option 5"");

        var label1 = document.getElementById(""label 1"");
        var label2 = document.getElementById(""label 2"");
        var label3 = document.getElementById(""label 3"");
        var label4 = document.getElementById(""label 4"");
        var label5 = document.getEle");
            WriteLiteral(@"mentById(""label 5"");
        
//        window.onload = function load(parameters) {
//            var questions = document.getElementsByClassName('question');
//            if (questions.length > 1) {
//                $('#Add_Question').attr('hidden', false);
//            }
//        }
        $(document).ready(function() {
            var questions = document.getElementsByClassName('question');
            if (questions.length > 1) {
                $('#Add_Question').attr('hidden', false);
            }        });
        
        $('#ideaForm').submit(function  SubmitQuestions(event) {
            
            if (Validate()) {
                alert(""Question fields can't be empty !"");
                event.preventDefault();
            } else {

                SaveQuestion();                
            }
        });
         
        
       


        function SaveQuestion(parameters) {
            
                     
            var questionInput = document.getElem");
            WriteLiteral(@"entById('QuestionFieldVms_' + questionIndex + '__question');                      
            var questionTypeInput = document.getElementById('QuestionFieldVms_' + questionIndex + '__questionType');
            var option1Input = document.getElementById('QuestionFieldVms_' + questionIndex + '__Options_0_');
            var option2Input = document.getElementById('QuestionFieldVms_' + questionIndex + '__Options_1_');
            var option3Input = document.getElementById('QuestionFieldVms_' + questionIndex + '__Options_2_');
            var option4Input = document.getElementById('QuestionFieldVms_' + questionIndex + '__Options_3_');
            var option5Input = document.getElementById('QuestionFieldVms_' + questionIndex + '__Options_4_');
                 
            questionInput.value = question.value;
            //  console.log(questionInput.value);
            // console.log(questionInput.valueOf());
           
            
            if (questionType_1.checked == true) {
              ");
            WriteLiteral(@"  questionTypeInput.value = questionType_1.value;

            } else {
                questionTypeInput.value = questionType_2.value;

            }
            //  console.log(questionTypeInput.value);
            //  console.log(questionTypeInput.valueOf());

            
            option1Input.value = option1.value;
            //   console.log(option1Input.value);
            //  console.log(option1Input.valueOf());

            
            option2Input.value = option2.value;
            //  console.log(option2Input.value);
            //  console.log(option2Input.valueOf());

            
            option3Input.value = option3.value;
            //   console.log(option3Input.value);
            //  console.log(option3Input.valueOf());
            
            option4Input.value = option4.value;
            //    console.log(option4Input.value);
            //   console.log(option4Input.valueOf());

            
            option5Input.value = option5.value;
         ");
            WriteLiteral(@"   //  console.log(option5Input.value);
            //  console.log(option5Input.valueOf());
            


        }

        function AddQuestion() {
            
            if (Validate()) {
                alert(""Question fields can't be empty !"");
            } else {
                if (questionIndex == questionCount) {
                    SaveQuestion();

                }
                questionCount++;
                
                ChangeQuestion(questionCount - questionIndex);
                questionIndex = questionCount;

                /*var questionInput = document.getElementById('QuestionFieldVms_' + questionCount + '__question');                      
                var questionTypeInput = document.getElementById('QuestionFieldVms_' + questionCount + '__questionType');
                var option1Input = document.getElementById('QuestionFieldVms_' + questionCount + '__Options_0_');
                var option2Input = document.getElementById('QuestionFieldVms_' + qu");
            WriteLiteral(@"estionCount + '__Options_1_');
                var option3Input = document.getElementById('QuestionFieldVms_' + questionCount + '__Options_2_');
                var option4Input = document.getElementById('QuestionFieldVms_' + questionCount + '__Options_3_');
                var option5Input = document.getElementById('QuestionFieldVms_' + questionCount + '__Options_4_');
                     
                questionInput.value = question.value;
               //  console.log(questionInput.value);
               // console.log(questionInput.valueOf());
               
                
                if (questionType_1.checked == true) {
                    questionTypeInput.value = questionType_1.value;
    
                } else {
                    questionTypeInput.value = questionType_2.value;
    
                }
                //  console.log(questionTypeInput.value);
                //  console.log(questionTypeInput.valueOf());
    
                
                option1Inpu");
            WriteLiteral(@"t.value = option1.value;
                //   console.log(option1Input.value);
                //  console.log(option1Input.valueOf());
    
                
                option2Input.value = option2.value;
                //  console.log(option2Input.value);
                //  console.log(option2Input.valueOf());
    
                
                option3Input.value = option3.value;
                //   console.log(option3Input.value);
                //  console.log(option3Input.valueOf());
                
                option4Input.value = option4.value;
                //    console.log(option4Input.value);
                //   console.log(option4Input.valueOf());
    
                
                option5Input.value = option5.value;
                //  console.log(option5Input.value);
                //  console.log(option5Input.valueOf());
    */


               // questionIndex++;

                console.log('questionindex: ' + questionIndex);
                ");
            WriteLiteral(@"console.log('questioncount: ' + questionCount);

                var titleNumber = questionIndex + 1;    
                // reset form 
                questionTitle.innerText = ""Question "" + (questionIndex + 1);
            
                question.value = '';
            
                questionType_1.checked = true; 
            
                option1.value = '';
            
                option2.value = '';
            
                option3.value = ''; 
                option3.hidden = true; 
                label3.hidden = true; 

                option4.value = ''; 
                option4.hidden = true; 
                label4.hidden = true; 


                option5.value = '';
                option5.hidden = true;
                label5.hidden = true; 

                optionIndex = 2;

                $('.prevQuestion').attr('hidden', false);
                
                if (document.getElementsByClassName('question').length == questionCount +1) {
   ");
            WriteLiteral(@"                 $('#Add_Question').attr('disabled', true);
                }

                $('#Remove_Question').attr('hidden', false);

            }
           

        }

        function RemoveQuestion(parameters) {
            console.log(questionCount);
            console.log(questionIndex);

            var questionInput = document.getElementById('QuestionFieldVms_' + questionCount + '__question');                      
            var questionTypeInput = document.getElementById('QuestionFieldVms_' + questionCount + '__questionType');
            var option1Input = document.getElementById('QuestionFieldVms_' + questionCount + '__Options_0_');
            var option2Input = document.getElementById('QuestionFieldVms_' + questionCount + '__Options_1_');
            var option3Input = document.getElementById('QuestionFieldVms_' + questionCount + '__Options_2_');
            var option4Input = document.getElementById('QuestionFieldVms_' + questionCount + '__Options_3_');
          ");
            WriteLiteral(@"  var option5Input = document.getElementById('QuestionFieldVms_' + questionCount + '__Options_4_');

            questionInput.value = '';
            questionTypeInput.value = '';
            option1Input.value = '';
            option2Input.value = '';
            option3Input.value = '';
            option4Input.value = '';
            option5Input.value = '';
            
            /*var titleNumber = questionIndex + 1;    
               // reset form 
               questionTitle.innerText = ""Question "" + (questionIndex + 1);
           
               question.value = '';
           
               questionType_1.checked = true; 
           
               option1.value = '';
           
               option2.value = '';
           
               option3.value = ''; 
               option3.hidden = true; 
               label3.hidden = true; 

               option4.value = ''; 
               option4.hidden = true; 
               label4.hidden = true; 


           ");
            WriteLiteral(@"    option5.value = '';
               option5.hidden = true;
               label5.hidden = true; */
          
            
            if (questionIndex == questionCount) {
                ChangeQuestion(-1,true);
            } 
            
            
            
            
              
            questionCount--;
            if (questionCount == 0) {
                $('#Remove_Question').attr('hidden', true);

            }
            console.log('questionindex: ' + questionIndex);
            console.log('questioncount: ' + questionCount);

            if (questionIndex == questionCount) {
                $('.nextQuestion').attr('hidden', true);
            } 
            $('#Add_Question').attr('disabled',false)
        }
    
        function AddOption() {
            if (optionIndex < 5) {
                optionIndex++;

            }
            var option = document.getElementById('option ' + optionIndex);
            var label =document.getElementById('lab");
            WriteLiteral(@"el ' + optionIndex);
            
            option.hidden = false;
            label.hidden = false;
            console.log(optionIndex);
            
        
            if (optionIndex > 2) {
                $('#Remove_Option').attr('disabled', false);
            }
        }

        function RemoveOption() {
           

        
            var option = document.getElementById('option ' + optionIndex);
            var label =document.getElementById('label ' + optionIndex);
            
            option.hidden = true;
            option.value = '';         
            label.hidden = true;
            if (optionIndex < 4) {
                $('#Remove_Option').attr('disabled', true);
            }
            console.log(optionIndex)
            if (optionIndex > 2) {
                optionIndex--;
            }

        }
                     
        function ChangeQuestion(index, remove = false) {
            if (Validate() && remove == false) {
                al");
            WriteLiteral(@"ert(""Question fields can't be empty !"");
            } else {
                if (index == -1 ) {
                    SaveQuestion();
                }
            
                questionIndex = questionIndex + index;
                console.log('questionindex: ' + questionIndex);
                console.log('questioncount: ' + questionCount);
                var questionInput = document.getElementById('QuestionFieldVms_' + questionIndex + '__question');                      
                var questionTypeInput = document.getElementById('QuestionFieldVms_' + questionIndex + '__questionType');
                var option1Input = document.getElementById('QuestionFieldVms_' + questionIndex + '__Options_0_');
                var option2Input = document.getElementById('QuestionFieldVms_' + questionIndex + '__Options_1_');
                var option3Input = document.getElementById('QuestionFieldVms_' + questionIndex + '__Options_2_');
                var option4Input = document.getElementById('Ques");
            WriteLiteral(@"tionFieldVms_' + questionIndex + '__Options_3_');
                var option5Input = document.getElementById('QuestionFieldVms_' + questionIndex + '__Options_4_');
                optionIndex = 2;
                questionTitle.innerText ='Question ' +(questionIndex + 1);
                question.value = questionInput.value; 
                if (questionTypeInput.value == ""radiobutton"") {
                    questionType_1.checked = true;
                    questionType_2.checked = false;
                } else {
                    questionType_1.checked = false;
                    questionType_2.checked = true;
                }
            
                option1.value = option1Input.value;
                option2.value = option2Input.value; 

                if (option3Input.value != '') {
                    option3.hidden = false;
                    label3.hidden = false;
                    optionIndex++;

                } else {
                    option3.hidden = true;
   ");
            WriteLiteral(@"                 label3.hidden = true;

                }
                option3.value = option3Input.value;
                if (option4Input.value != '') {
                    option4.hidden = false;
                    label4.hidden = false;
                    optionIndex++;

                } else {
                    option4.hidden = true;
                    label4.hidden = true;

                }
                option4.value = option4Input.value;
                console.log(option5Input.value);
                if (option5Input.value != '') {
                    option5.hidden = false;
                    label5.hidden = false;
                    optionIndex++;


                } else {
                    option5.hidden = true;
                    label5.hidden = true;

                }
                option5.value = option5Input.value;
            
                if (questionIndex == 0) {
                    $('.prevQuestion').attr('hidden', true);
             ");
            WriteLiteral(@"       $('.nextQuestion').attr('hidden', false);
                }  else if
                (questionIndex == questionCount) {
                    $('.prevQuestion').attr('hidden', false);
                    $('.nextQuestion').attr('hidden', true);
                } else {
                    $('.prevQuestion').attr('hidden', false);
                    $('.nextQuestion').attr('hidden', false);
                }

                console.log('questionindex: ' + questionIndex);
                console.log('questioncount: ' + questionCount);

            }

        }

        function Validate() {
            var check = false;
            var elements = [question, option1, option2, option3, option4, option5];
            elements.forEach(function(element) {
                if (element.hidden == false && element.value == '') {
                    check = true;
                }
            });
            
            
            return check;
        }
        
        
        ");
            WriteLiteral("\r\n           \r\n        \r\n\r\n//        function AddQuestion(parameters) {\r\n//            questionIndex++;\r\n//            $(\"#question 1\").attr(\'hidden\', true);\r\n//        }\r\n    </script>\r\n");
            EndContext();
#line 560 "C:\Users\Alex\Desktop\Stack\‌IntegratieProject 2019\Generic_Repo\UI.MVC\Views\Shared\EditorTemplates\QuestionFieldVM.cshtml"
}

#line default
#line hidden
            BeginContext(21410, 27, true);
            WriteLiteral("\r\n    <div class=\"question\"");
            EndContext();
            BeginWriteAttribute("id", " id=\"", 21437, "\"", 21465, 2);
            WriteAttributeValue("", 21442, "question", 21442, 8, true);
#line 562 "C:\Users\Alex\Desktop\Stack\‌IntegratieProject 2019\Generic_Repo\UI.MVC\Views\Shared\EditorTemplates\QuestionFieldVM.cshtml"
WriteAttributeValue(" ", 21450, ViewBag.index, 21451, 14, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(21466, 13, true);
            WriteLiteral(">\r\n\r\n        ");
            EndContext();
            BeginContext(21479, 53, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f33b96cae8e76ce75af777a458b428e9b17508da27300", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
#line 564 "C:\Users\Alex\Desktop\Stack\‌IntegratieProject 2019\Generic_Repo\UI.MVC\Views\Shared\EditorTemplates\QuestionFieldVM.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.question);

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(21532, 10, true);
            WriteLiteral("\r\n        ");
            EndContext();
            BeginContext(21542, 57, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f33b96cae8e76ce75af777a458b428e9b17508da29181", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
#line 565 "C:\Users\Alex\Desktop\Stack\‌IntegratieProject 2019\Generic_Repo\UI.MVC\Views\Shared\EditorTemplates\QuestionFieldVM.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.questionType);

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(21599, 10, true);
            WriteLiteral("\r\n        ");
            EndContext();
            BeginContext(21609, 56, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f33b96cae8e76ce75af777a458b428e9b17508da31066", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
#line 566 "C:\Users\Alex\Desktop\Stack\‌IntegratieProject 2019\Generic_Repo\UI.MVC\Views\Shared\EditorTemplates\QuestionFieldVM.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Options[0]);

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(21665, 10, true);
            WriteLiteral("\r\n        ");
            EndContext();
            BeginContext(21675, 56, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f33b96cae8e76ce75af777a458b428e9b17508da32949", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
#line 567 "C:\Users\Alex\Desktop\Stack\‌IntegratieProject 2019\Generic_Repo\UI.MVC\Views\Shared\EditorTemplates\QuestionFieldVM.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Options[1]);

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(21731, 10, true);
            WriteLiteral("\r\n        ");
            EndContext();
            BeginContext(21741, 56, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f33b96cae8e76ce75af777a458b428e9b17508da34832", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
#line 568 "C:\Users\Alex\Desktop\Stack\‌IntegratieProject 2019\Generic_Repo\UI.MVC\Views\Shared\EditorTemplates\QuestionFieldVM.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Options[2]);

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(21797, 10, true);
            WriteLiteral("\r\n        ");
            EndContext();
            BeginContext(21807, 56, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f33b96cae8e76ce75af777a458b428e9b17508da36715", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
#line 569 "C:\Users\Alex\Desktop\Stack\‌IntegratieProject 2019\Generic_Repo\UI.MVC\Views\Shared\EditorTemplates\QuestionFieldVM.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Options[3]);

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(21863, 10, true);
            WriteLiteral("\r\n        ");
            EndContext();
            BeginContext(21873, 56, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f33b96cae8e76ce75af777a458b428e9b17508da38598", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
#line 570 "C:\Users\Alex\Desktop\Stack\‌IntegratieProject 2019\Generic_Repo\UI.MVC\Views\Shared\EditorTemplates\QuestionFieldVM.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Options[4]);

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(21929, 29, true);
            WriteLiteral("\r\n\r\n\r\n    </div>\r\n\r\n   \r\n\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<D.UI.MVC.Models.Fields.QuestionFieldVm> Html { get; private set; }
    }
}
#pragma warning restore 1591
